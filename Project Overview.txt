Project Overview
----------------

	Client and Domain Overview
	
		I started my journey with AAMC (Association of American Medical Colleges) based of a Health Domain, 
		It is a not-for-profit association, where they leads and serves the academic medicine community in the United States and the European Union. 
		Catered to a wide array of users, including faculty, administrative staff, and various educational entities(academic and research). 

	Project Overview
	
		We developed a comprehensive web-based application for managing Faculty Rosters, which centralizes and organizes critical information about 
		faculty members. 
		The application serves as a dynamic tool for storing and accessing personal details, ongoing appointments, and professional history, 
		
		including:

			Biographical information
			Educational background
			Race and ethnicity data
			Previous employment history
		
	Roles and Responsibilities
	
		As a Java Developer, my primary responsibility was designing and implementing restful webservices with microservices to modularize the application, 
		ensuring scalability, maintainability, and efficient performance. and to build a seamless flow between frontend and datbase. Key areas of focus included:

		Search and Add/Edit Operations: Developed microservices to enable users to interact with the database efficiently, 
			ensuring quick and reliable retrieval and modification of data.
		Report Generation: Streamlined the report generation process, allowing users to easily create and 
			customize reports based on specific criteria and data sets.
		Bulk Upload: Implemented a robust solution for bulk data uploads, optimizing the process of importing large datasets 
			seamlessly without compromising system performance.
		Reference Management: Managed the relationships between various data entities, ensuring data integrity and 
			consistency across the application.
			
	Challenges Faced
	
	Sprint 1: SLA Compliance in Report Generation
		Challenge:
			One of the major hurdles we encountered was ensuring compliance with Service Level Agreements (SLAs) for report generation. 
		The process required intensive backend computations and complex database interactions, leading to performance bottlenecks.

		Solution:
			Database Indexing: Introduced targeted indexes, which significantly reduced query execution times, enhancing retrieval speed.
			Refactoring Complex Queries: Simplified complex SQL queries by removing unnecessary joins and optimizing table relationships, 
				improving data retrieval efficiency.
			Utilized Database Views: Created database views for frequently accessed datasets, allowing for more straightforward and 
				faster access to complex data.
		
	Sprint 2: Bulk Data Manipulation
		Challenge:
			Handling bulk data operations, such as uploads and validations, was challenging due to the sheer volume 
		of data and the need to meet stringent SLAs.

		Solution:
			Globalized Database Calls: Reduced overhead by consolidating multiple requests into single database calls, minimizing performance impact.
			Parallel Processing: Leveraged parallel streams to process independent operations concurrently, significantly speeding up bulk data handling.
			Consolidated Save Operations: Optimized save operations by bundling multiple rows into a single database transaction, 
				which reduced transaction overhead and improved efficiency.

	Sprint 3: Faculty Appointments Management
		Challenge:
			Managing faculty appointments was complex due to the need to ensure accurate data handling across multiple roles and 
		academic sessions, with varying appointment details and timelines.

		Solution:
			Designed modular microservices that allowed dynamic management of faculty appointments.
			Introduced automated workflows for appointment creation, updating, and expiration, ensuring data consistency.
			Implemented validation rules to ensure that appointments adhered to predefined criteria, minimizing human error.
			
	Sprint 4: Reference Datasets Download
		Challenge:
			Providing users with seamless access to reference datasets while maintaining system performance 
		was a key challenge, especially when dealing with large data sets that needed to be downloaded and processed.

		Solution:
			We optimized the extraction process to reduce unnecessary data processing during downloads.
			Asynchronous Data Retrieval: Enabled asynchronous data retrieval to ensure that users could continue interacting with the 
				application while datasets were being prepared in the background.

	Sprint 5: Add/Edit Faculty Details
		Challenge:
			Allowing users to add or edit faculty details without compromising data integrity posed a significant challenge, 
		particularly with respect to handling complex data relationships and ensuring consistency.

		Solution:
			Incorporated real-time validation to ensure data accuracy. for users to input and update faculty information.
			Version Control: Implemented versioning for faculty records to track changes and allow rollback in case of errors.
			Data Integrity Constraints: Applied strict database constraints and triggers to ensure that edits were consistent with 
				business rules, preventing invalid data from being saved.